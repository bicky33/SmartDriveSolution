// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Repositories;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(SmartDriveContext))]
    [Migration("20240225044535_AddPartnerBatchInvoiceSequence")]
    partial class AddPartnerBatchInvoiceSequence
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("besa_emp_entity_id", "hr")
                .HasMin(1L);

            modelBuilder.HasSequence("cadoc_cuex_id");

            modelBuilder.HasSequence("employee_are_workgroup_seq", "hr")
                .HasMin(1L);

            modelBuilder.HasSequence("emsa_id")
                .HasMin(1L);

            modelBuilder.HasSequence("emsa_id", "hr")
                .HasMin(1L);

            modelBuilder.HasSequence("serc_seq");

            modelBuilder.HasSequence("user_address_seq", "users")
                .StartsAt(2L)
                .HasMin(2L);

            modelBuilder.Entity("Domain.Entities.CR.CustomerClaim", b =>
                {
                    b.Property<int>("CuclCreqEntityid")
                        .HasColumnType("int")
                        .HasColumnName("cucl_creq_entityid");

                    b.Property<DateTime?>("CuclCreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("cucl_create_date");

                    b.Property<decimal?>("CuclEventPrice")
                        .HasColumnType("money")
                        .HasColumnName("cucl_event_price");

                    b.Property<int?>("CuclEvents")
                        .HasColumnType("int")
                        .HasColumnName("cucl_events");

                    b.Property<string>("CuclReason")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("cucl_reason");

                    b.Property<decimal?>("CuclSubtotal")
                        .HasColumnType("money")
                        .HasColumnName("cucl_subtotal");

                    b.HasKey("CuclCreqEntityid")
                        .HasName("PK__customer__268FDC39F2008167");

                    b.ToTable("customer_claim", "customer");
                });

            modelBuilder.Entity("Domain.Entities.CR.CustomerInscAsset", b =>
                {
                    b.Property<int>("CiasCreqEntityid")
                        .HasColumnType("int")
                        .HasColumnName("cias_creq_entityid");

                    b.Property<int?>("CiasCarsId")
                        .HasColumnType("int")
                        .HasColumnName("cias_cars_id");

                    b.Property<int?>("CiasCityId")
                        .HasColumnType("int")
                        .HasColumnName("cias_city_id");

                    b.Property<decimal?>("CiasCurrentPrice")
                        .HasColumnType("money")
                        .HasColumnName("cias_current_price");

                    b.Property<DateTime?>("CiasEnddate")
                        .HasColumnType("datetime")
                        .HasColumnName("cias_enddate");

                    b.Property<decimal?>("CiasInsurancePrice")
                        .HasColumnType("money")
                        .HasColumnName("cias_insurance_price");

                    b.Property<string>("CiasIntyName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("cias_inty_name");

                    b.Property<string>("CiasIsNewChar")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("cias_isNewChar")
                        .IsFixedLength();

                    b.Property<string>("CiasPaidType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cias_paid_type");

                    b.Property<string>("CiasPoliceNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cias_police_number");

                    b.Property<DateTime?>("CiasStartdate")
                        .HasColumnType("datetime")
                        .HasColumnName("cias_startdate");

                    b.Property<decimal?>("CiasTotalPremi")
                        .HasColumnType("money")
                        .HasColumnName("cias_total_premi");

                    b.Property<string>("CiasYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("cias_year");

                    b.HasKey("CiasCreqEntityid")
                        .HasName("PK__customer__588FDDBBF4581C25");

                    b.HasIndex("CiasCarsId");

                    b.HasIndex("CiasCityId");

                    b.HasIndex("CiasIntyName");

                    b.HasIndex(new[] { "CiasPoliceNumber" }, "UQ__customer__E9035C58A4DFCBD1")
                        .IsUnique();

                    b.ToTable("customer_insc_assets", "customer");
                });

            modelBuilder.Entity("Domain.Entities.CR.CustomerInscDoc", b =>
                {
                    b.Property<int>("CadocId")
                        .HasColumnType("int")
                        .HasColumnName("cadoc_id");

                    b.Property<int>("CadocCreqEntityid")
                        .HasColumnType("int")
                        .HasColumnName("cadoc_creq_entityid");

                    b.Property<string>("CadocCategory")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cadoc_category");

                    b.Property<string>("CadocFilename")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cadoc_filename");

                    b.Property<int?>("CadocFilesize")
                        .HasColumnType("int")
                        .HasColumnName("cadoc_filesize");

                    b.Property<string>("CadocFiletype")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cadoc_filetype");

                    b.Property<DateTime?>("CadocModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("cadoc_modified_date");

                    b.HasKey("CadocId", "CadocCreqEntityid")
                        .HasName("PK_CADOC");

                    b.HasIndex("CadocCreqEntityid");

                    b.ToTable("customer_insc_doc", "customer");
                });

            modelBuilder.Entity("Domain.Entities.CR.CustomerInscExtend", b =>
                {
                    b.Property<int>("CuexId")
                        .HasColumnType("int")
                        .HasColumnName("cuex_id");

                    b.Property<int>("CuexCreqEntityid")
                        .HasColumnType("int")
                        .HasColumnName("cuex_creq_entityid");

                    b.Property<string>("CuexName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("cuex_name");

                    b.Property<decimal?>("CuexNominal")
                        .HasColumnType("money")
                        .HasColumnName("cuex_nominal");

                    b.Property<int?>("CuexTotalItem")
                        .HasColumnType("int")
                        .HasColumnName("cuex_total_item");

                    b.HasKey("CuexId", "CuexCreqEntityid")
                        .HasName("PK_CUEX");

                    b.HasIndex("CuexCreqEntityid");

                    b.ToTable("customer_insc_extend", "customer");
                });

            modelBuilder.Entity("Domain.Entities.CR.CustomerRequest", b =>
                {
                    b.Property<int>("CreqEntityid")
                        .HasColumnType("int")
                        .HasColumnName("creq_entityid");

                    b.Property<int?>("CreqAgenEntityid")
                        .HasColumnType("int")
                        .HasColumnName("creq_agen_entityid");

                    b.Property<DateTime?>("CreqCreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creq_create_date");

                    b.Property<int?>("CreqCustEntityid")
                        .HasColumnType("int")
                        .HasColumnName("creq_cust_entityid");

                    b.Property<DateTime?>("CreqModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creq_modified_date");

                    b.Property<string>("CreqStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("creq_status");

                    b.Property<string>("CreqType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("creq_type");

                    b.HasKey("CreqEntityid")
                        .HasName("PK__customer__606B6AF199592E22");

                    b.HasIndex("CreqAgenEntityid");

                    b.HasIndex("CreqCustEntityid");

                    b.ToTable("customer_request", "customer");
                });

            modelBuilder.Entity("Domain.Entities.HR.BatchEmployeeSalary", b =>
                {
                    b.Property<int>("BesaEmpEntityId")
                        .HasColumnType("int")
                        .HasColumnName("besa_emp_entity_id");

                    b.Property<DateTime>("BesaCreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("besa_created_date");

                    b.Property<string>("BesaAccountNumber")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("besa_account_number");

                    b.Property<DateTime?>("BesaModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("besa_modified_date");

                    b.Property<DateTime?>("BesaPaidDate")
                        .HasColumnType("datetime")
                        .HasColumnName("besa_paid_date");

                    b.Property<string>("BesaPatrTrxno")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("besa_patr_trxno");

                    b.Property<string>("BesaStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("besa_status");

                    b.Property<decimal?>("BesaTotalSalary")
                        .HasColumnType("money")
                        .HasColumnName("besa_total_salary");

                    b.Property<DateTime?>("EmsTrasferDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ems_trasfer_Date");

                    b.HasKey("BesaEmpEntityId", "BesaCreatedDate")
                        .HasName("PK__batch_em__D2FFC7DC3B2819E6");

                    b.ToTable("batch_employee_salary", "hr");
                });

            modelBuilder.Entity("Domain.Entities.HR.Employee", b =>
                {
                    b.Property<int>("EmpEntityid")
                        .HasColumnType("int")
                        .HasColumnName("emp_entityid");

                    b.Property<string>("EmpAccountNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("emp_account_number");

                    b.Property<string>("EmpGraduate")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("emp_graduate");

                    b.Property<string>("EmpJobCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("emp_job_code");

                    b.Property<DateTime?>("EmpJoinDate")
                        .HasColumnType("datetime")
                        .HasColumnName("emp_join_date");

                    b.Property<DateTime?>("EmpModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("emp_modified_date");

                    b.Property<string>("EmpName")
                        .HasMaxLength(85)
                        .IsUnicode(false)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("emp_name");

                    b.Property<decimal?>("EmpNetSalary")
                        .HasColumnType("money")
                        .HasColumnName("emp_net_salary");

                    b.Property<string>("EmpStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("emp_status");

                    b.Property<string>("EmpType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("emp_type");

                    b.HasKey("EmpEntityid")
                        .HasName("PK__employee__4B2A27D499752B65");

                    b.HasIndex("EmpJobCode");

                    b.ToTable("employees", "hr");
                });

            modelBuilder.Entity("Domain.Entities.HR.EmployeeAreWorkgroup", b =>
                {
                    b.Property<int>("EawgEntityid")
                        .HasColumnType("int")
                        .HasColumnName("eawg_entityid");

                    b.Property<int>("EawgId")
                        .HasColumnType("int")
                        .HasColumnName("eawg_id");

                    b.Property<string>("EawgArwgCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("eawg_arwg_code");

                    b.Property<DateTime?>("EawgModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("eawg_modified_date");

                    b.Property<string>("EawgStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("eawg_status");

                    b.HasKey("EawgEntityid", "EawgId")
                        .HasName("PK__employee__0B04DA35C0E55D77");

                    b.HasIndex("EawgArwgCode");

                    b.HasIndex(new[] { "EawgId" }, "UQ__employee__C54750D66DC8B49A")
                        .IsUnique();

                    b.ToTable("employee_are_workgroup", "hr");
                });

            modelBuilder.Entity("Domain.Entities.HR.EmployeeSalaryDetail", b =>
                {
                    b.Property<int>("EmsaId")
                        .HasColumnType("int")
                        .HasColumnName("emsa_id");

                    b.Property<int>("EmsaEmpEntityid")
                        .HasColumnType("int")
                        .HasColumnName("emsa_emp_entityid");

                    b.Property<DateTime>("EmsaCreateDate")
                        .HasColumnType("date")
                        .HasColumnName("emsa_create_date");

                    b.Property<string>("EmsaName")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("emsa_name");

                    b.Property<decimal?>("EmsaSubtotal")
                        .HasColumnType("money")
                        .HasColumnName("emsa_subtotal");

                    b.HasKey("EmsaId", "EmsaEmpEntityid", "EmsaCreateDate")
                        .HasName("PK__employee__027F0DDCCF4FC361");

                    b.HasIndex("EmsaEmpEntityid");

                    b.ToTable("employee_salary_detail", "hr");
                });

            modelBuilder.Entity("Domain.Entities.HR.JobType", b =>
                {
                    b.Property<string>("JobCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("job_code");

                    b.Property<string>("JobDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job_desc");

                    b.Property<DateTime?>("JobModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("job_modified_date");

                    b.Property<decimal?>("JobRateMax")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("job_rate_max");

                    b.Property<decimal?>("JobRateMin")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("job_rate_min");

                    b.HasKey("JobCode")
                        .HasName("PK__job_type__FBB86DB2D17BB528");

                    b.ToTable("job_type", "hr");
                });

            modelBuilder.Entity("Domain.Entities.HR.TemplateSalary", b =>
                {
                    b.Property<int>("TesalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tesal_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TesalId"));

                    b.Property<string>("TesalName")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("tesal_name");

                    b.Property<decimal?>("TesalNominal")
                        .HasColumnType("money")
                        .HasColumnName("tesal_nominal");

                    b.Property<double?>("TesalRateMax")
                        .HasColumnType("float")
                        .HasColumnName("tesal_rate_max");

                    b.Property<double?>("TesalRateMin")
                        .HasColumnType("float")
                        .HasColumnName("tesal_rate_min");

                    b.HasKey("TesalId")
                        .HasName("PK__template__C273C168941EAA22");

                    b.ToTable("template_salary", "hr");
                });

            modelBuilder.Entity("Domain.Entities.Master.AreaWorkgroup", b =>
                {
                    b.Property<string>("ArwgCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("arwg_code");

                    b.Property<int?>("ArwgCityId")
                        .HasColumnType("int")
                        .HasColumnName("arwg_city_id");

                    b.Property<string>("ArwgDesc")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("arwg_desc");

                    b.HasKey("ArwgCode")
                        .HasName("PK__area_wor__B0CF95B363D450DB");

                    b.HasIndex("ArwgCityId");

                    b.ToTable("area_workgroup", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.CarBrand", b =>
                {
                    b.Property<int>("CabrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cabr_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CabrId"));

                    b.Property<string>("CabrName")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("cabr_name");

                    b.HasKey("CabrId")
                        .HasName("PK__car_bran__ED0C67C631D99CAB");

                    b.HasIndex(new[] { "CabrName" }, "UQ__car_bran__750DD7D5B319F0DE")
                        .IsUnique()
                        .HasFilter("[cabr_name] IS NOT NULL");

                    b.ToTable("car_brands", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.CarModel", b =>
                {
                    b.Property<int>("CarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("carm_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarmId"));

                    b.Property<int?>("CarmCabrId")
                        .HasColumnType("int")
                        .HasColumnName("carm_cabr_id");

                    b.Property<string>("CarmName")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("carm_name");

                    b.HasKey("CarmId")
                        .HasName("PK__car_mode__C680A953F5FCDC08");

                    b.HasIndex("CarmCabrId");

                    b.HasIndex(new[] { "CarmName" }, "UQ__car_mode__D13ADFA2F45F4A65")
                        .IsUnique()
                        .HasFilter("[carm_name] IS NOT NULL");

                    b.ToTable("car_models", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.CarSeries", b =>
                {
                    b.Property<int>("CarsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cars_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarsId"));

                    b.Property<int?>("CarsCarmId")
                        .HasColumnType("int")
                        .HasColumnName("cars_carm_id");

                    b.Property<string>("CarsName")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("cars_name");

                    b.Property<int?>("CarsPassenger")
                        .HasColumnType("int")
                        .HasColumnName("cars_passenger");

                    b.HasKey("CarsId")
                        .HasName("PK__car_seri__588724E487CFF182");

                    b.HasIndex("CarsCarmId");

                    b.HasIndex(new[] { "CarsName" }, "UQ__car_seri__92361ED82E6545C7")
                        .IsUnique()
                        .HasFilter("[cars_name] IS NOT NULL");

                    b.ToTable("car_series", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.Category", b =>
                {
                    b.Property<int>("CateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cate_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CateId"));

                    b.Property<string>("CateName")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("cate_name");

                    b.HasKey("CateId")
                        .HasName("PK__category__34EAD173D4181A27");

                    b.ToTable("category", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .HasMaxLength(85)
                        .IsUnicode(false)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("city_name");

                    b.Property<int?>("CityProvId")
                        .HasColumnType("int")
                        .HasColumnName("city_prov_id");

                    b.HasKey("CityId")
                        .HasName("PK__cities__031491A8741B4726");

                    b.HasIndex("CityProvId");

                    b.HasIndex(new[] { "CityName" }, "UQ__cities__1AA4F7B507540D76")
                        .IsUnique()
                        .HasFilter("[city_name] IS NOT NULL");

                    b.ToTable("cities", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.InsuranceType", b =>
                {
                    b.Property<string>("IntyName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("inty_name");

                    b.Property<string>("IntyDesc")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("inty_desc");

                    b.HasKey("IntyName")
                        .HasName("PK__insuranc__38A54D40A5933419");

                    b.ToTable("insurance_type", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.Provinsi", b =>
                {
                    b.Property<int>("ProvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("prov_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvId"));

                    b.Property<string>("ProvName")
                        .HasMaxLength(85)
                        .IsUnicode(false)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("prov_name");

                    b.Property<int?>("ProvZonesId")
                        .HasColumnType("int")
                        .HasColumnName("prov_zones_id");

                    b.HasKey("ProvId")
                        .HasName("PK__provinsi__435F53266A2CE310");

                    b.HasIndex("ProvZonesId");

                    b.HasIndex(new[] { "ProvName" }, "UQ__provinsi__852498465E70AC22")
                        .IsUnique()
                        .HasFilter("[prov_name] IS NOT NULL");

                    b.ToTable("provinsi", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.RegionPlat", b =>
                {
                    b.Property<string>("RegpName")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("regp_name");

                    b.Property<string>("RegpDesc")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("regp_desc");

                    b.Property<int?>("RegpProvId")
                        .HasColumnType("int")
                        .HasColumnName("regp_prov_id");

                    b.HasKey("RegpName")
                        .HasName("PK__region_p__187EAC814CC8BA3D");

                    b.HasIndex("RegpProvId");

                    b.ToTable("region_plat", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.TemplateInsurancePremi", b =>
                {
                    b.Property<int>("TemiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("temi_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemiId"));

                    b.Property<int?>("TemiCateId")
                        .HasColumnType("int")
                        .HasColumnName("temi_cate_id");

                    b.Property<string>("TemiIntyName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("temi_inty_name");

                    b.Property<string>("TemiName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("temi_name");

                    b.Property<double?>("TemiNominal")
                        .HasColumnType("float")
                        .HasColumnName("temi_nominal");

                    b.Property<double?>("TemiRateMax")
                        .HasColumnType("float")
                        .HasColumnName("temi_rate_max");

                    b.Property<double?>("TemiRateMin")
                        .HasColumnType("float")
                        .HasColumnName("temi_rate_min");

                    b.Property<string>("TemiType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("temi_type");

                    b.Property<int?>("TemiZonesId")
                        .HasColumnType("int")
                        .HasColumnName("temi_zones_id");

                    b.HasKey("TemiId")
                        .HasName("PK__template__3E6268652E62DDB8");

                    b.HasIndex("TemiCateId");

                    b.HasIndex("TemiIntyName");

                    b.HasIndex("TemiZonesId");

                    b.ToTable("template_insurance_premi", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.TemplateServiceTask", b =>
                {
                    b.Property<int>("TestaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("testa_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestaId"));

                    b.Property<string>("TestaCallmethod")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("testa_callmethod");

                    b.Property<string>("TestaGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("testa_group");

                    b.Property<string>("TestaName")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("testa_name");

                    b.Property<int?>("TestaSeqorder")
                        .HasColumnType("int")
                        .HasColumnName("testa_seqorder");

                    b.Property<string>("TestaSyncPartner")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("testa_sync_partner");

                    b.Property<int?>("TestaTetyId")
                        .HasColumnType("int")
                        .HasColumnName("testa_tety_id");

                    b.HasKey("TestaId")
                        .HasName("PK__template__5FE71914BC81D9DE");

                    b.HasIndex("TestaTetyId");

                    b.ToTable("template_service_task", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.TemplateTaskWorkorder", b =>
                {
                    b.Property<int>("TewoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tewo_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TewoId"));

                    b.Property<string>("TewoName")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("tewo_name");

                    b.Property<int?>("TewoTestaId")
                        .HasColumnType("int")
                        .HasColumnName("tewo_testa_id");

                    b.Property<string>("TewoValue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tewo_value");

                    b.HasKey("TewoId")
                        .HasName("PK__template__5130424CBFFCF0CB");

                    b.HasIndex("TewoTestaId");

                    b.ToTable("template_task_workorder", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.TemplateType", b =>
                {
                    b.Property<int>("TetyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tety_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TetyId"));

                    b.Property<string>("TetyGroup")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("tety_group");

                    b.Property<string>("TetyName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("tety_name");

                    b.HasKey("TetyId")
                        .HasName("PK__template__895AF6C9C93F17CD");

                    b.HasIndex(new[] { "TetyName" }, "UQ__template__F5145B1292B84978")
                        .IsUnique()
                        .HasFilter("[tety_name] IS NOT NULL");

                    b.ToTable("template_type", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Master.Zone", b =>
                {
                    b.Property<int>("ZonesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("zones_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZonesId"));

                    b.Property<string>("ZonesName")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("zones_name");

                    b.HasKey("ZonesId")
                        .HasName("PK__zones__D409535DC3E081F9");

                    b.ToTable("zones", "mtr");
                });

            modelBuilder.Entity("Domain.Entities.Partners.BatchPartnerInvoice", b =>
                {
                    b.Property<string>("BpinInvoiceNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("bpin_invoiceNo");

                    b.Property<string>("BpinAccountNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("bpin_accountNo");

                    b.Property<DateTime?>("BpinCreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("bpin_created_on");

                    b.Property<DateTime?>("BpinPaidDate")
                        .HasColumnType("datetime")
                        .HasColumnName("bpin_paid_date");

                    b.Property<string>("BpinPatrTrxno")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("bpin_patr_trxno");

                    b.Property<int?>("BpinPatrnEntityid")
                        .HasColumnType("int")
                        .HasColumnName("bpin_patrn_entityid");

                    b.Property<string>("BpinSeroId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("bpin_sero_id");

                    b.Property<string>("BpinStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("bpin_status");

                    b.Property<decimal?>("BpinSubtotal")
                        .HasColumnType("money")
                        .HasColumnName("bpin_subtotal");

                    b.Property<decimal?>("BpinTax")
                        .HasColumnType("money")
                        .HasColumnName("bpin_tax");

                    b.HasKey("BpinInvoiceNo")
                        .HasName("pk_bpin_invoiceNo");

                    b.HasIndex("BpinPatrTrxno");

                    b.HasIndex("BpinPatrnEntityid");

                    b.HasIndex("BpinSeroId");

                    b.ToTable("batch_partner_invoice", "partners");
                });

            modelBuilder.Entity("Domain.Entities.Partners.Partner", b =>
                {
                    b.Property<int>("PartEntityid")
                        .HasColumnType("int")
                        .HasColumnName("part_entityid");

                    b.Property<string>("PartAccountNo")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("part_accountNo");

                    b.Property<string>("PartAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("part_address");

                    b.Property<int>("PartCityId")
                        .HasColumnType("int")
                        .HasColumnName("part_city_id");

                    b.Property<DateTime?>("PartJoinDate")
                        .HasColumnType("datetime")
                        .HasColumnName("part_join_date");

                    b.Property<DateTime?>("PartModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("part_modified_date");

                    b.Property<string>("PartName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("part_name");

                    b.Property<string>("PartNpwp")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("part_npwp");

                    b.Property<string>("PartStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("part_status");

                    b.HasKey("PartEntityid")
                        .HasName("pk_part_entityid");

                    b.HasIndex("PartCityId");

                    b.ToTable("partners", "partners");
                });

            modelBuilder.Entity("Domain.Entities.Partners.PartnerAreaWorkgroup", b =>
                {
                    b.Property<int>("PawoPatrEntityid")
                        .HasColumnType("int")
                        .HasColumnName("pawo_patr_entityid");

                    b.Property<string>("PawoArwgCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("pawo_arwg_code");

                    b.Property<int>("PawoUserEntityid")
                        .HasColumnType("int")
                        .HasColumnName("pawo_user_entityid");

                    b.Property<DateTime?>("PawoModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("pawo_modified_date");

                    b.Property<string>("PawoStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("pawo_status");

                    b.HasKey("PawoPatrEntityid", "PawoArwgCode", "PawoUserEntityid")
                        .HasName("pk_pawo_patr_arwg_user");

                    b.HasIndex("PawoArwgCode");

                    b.HasIndex("PawoPatrEntityid", "PawoUserEntityid");

                    b.ToTable("partner_area_workgroup", "partners");
                });

            modelBuilder.Entity("Domain.Entities.Partners.PartnerContact", b =>
                {
                    b.Property<int>("PacoPatrnEntityid")
                        .HasColumnType("int")
                        .HasColumnName("paco_patrn_entityid");

                    b.Property<int>("PacoUserEntityid")
                        .HasColumnType("int")
                        .HasColumnName("paco_user_entityid");

                    b.Property<string>("PacoStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("paco_status");

                    b.HasKey("PacoPatrnEntityid", "PacoUserEntityid")
                        .HasName("pk_paco_patrn_user");

                    b.HasIndex("PacoUserEntityid");

                    b.ToTable("partner_contacts", "partners");
                });

            modelBuilder.Entity("Domain.Entities.Payment.Bank", b =>
                {
                    b.Property<int>("BankEntityid")
                        .HasColumnType("int")
                        .HasColumnName("bank_entityid");

                    b.Property<string>("BankDesc")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("bank_desc");

                    b.Property<string>("BankName")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("bank_name");

                    b.HasKey("BankEntityid")
                        .HasName("pk_bank_entityid");

                    b.HasIndex(new[] { "BankName" }, "UQ__banks__AEBE0980F1FF603D")
                        .IsUnique()
                        .HasFilter("[bank_name] IS NOT NULL");

                    b.ToTable("banks", "payment");
                });

            modelBuilder.Entity("Domain.Entities.Payment.Fintech", b =>
                {
                    b.Property<int>("FintEntityid")
                        .HasColumnType("int")
                        .HasColumnName("fint_entityid");

                    b.Property<string>("FintDesc")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("fint_desc");

                    b.Property<string>("FintName")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("fint_name");

                    b.HasKey("FintEntityid")
                        .HasName("pk_fint_entityid");

                    b.HasIndex(new[] { "FintName" }, "UQ__fintech__96EC42741428C8E7")
                        .IsUnique()
                        .HasFilter("[fint_name] IS NOT NULL");

                    b.ToTable("fintech", "payment");
                });

            modelBuilder.Entity("Domain.Entities.Payment.PaymentTransaction", b =>
                {
                    b.Property<string>("PatrTrxno")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("patr_trxno");

                    b.Property<DateTime?>("PatrCreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("patr_created_on");

                    b.Property<decimal?>("PatrCredit")
                        .HasColumnType("money")
                        .HasColumnName("patr_credit");

                    b.Property<decimal?>("PatrDebet")
                        .HasColumnType("money")
                        .HasColumnName("patr_debet");

                    b.Property<string>("PatrInvoiceNo")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("patr_invoice_no");

                    b.Property<string>("PatrNotes")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)")
                        .HasColumnName("patr_notes");

                    b.Property<string>("PatrTrxnoRev")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("patr_trxno_rev");

                    b.Property<string>("PatrType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("patr_type");

                    b.Property<string>("PatrUsacAccountNoFrom")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("patr_usac_accountNo_from");

                    b.Property<string>("PatrUsacAccountNoTo")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("patr_usac_accountNo_to");

                    b.HasKey("PatrTrxno")
                        .HasName("pk_patr_trxno");

                    b.HasIndex("PatrTrxnoRev");

                    b.ToTable("payment_transactions", "payment");
                });

            modelBuilder.Entity("Domain.Entities.Payment.UserAccount", b =>
                {
                    b.Property<int>("UsacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("usac_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsacId"));

                    b.Property<string>("UsacAccountno")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("usac_accountno");

                    b.Property<int?>("UsacBankEntityid")
                        .HasColumnType("int")
                        .HasColumnName("usac_bank_entityid");

                    b.Property<decimal?>("UsacCredit")
                        .HasColumnType("money")
                        .HasColumnName("usac_credit");

                    b.Property<decimal?>("UsacDebet")
                        .HasColumnType("money")
                        .HasColumnName("usac_debet");

                    b.Property<int?>("UsacFintEntityid")
                        .HasColumnType("int")
                        .HasColumnName("usac_fint_entityid");

                    b.Property<string>("UsacType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("usac_type");

                    b.Property<int?>("UsacUserEntityid")
                        .HasColumnType("int")
                        .HasColumnName("usac_user_entityid");

                    b.HasKey("UsacId")
                        .HasName("pk_usac_id");

                    b.HasIndex("UsacBankEntityid");

                    b.HasIndex("UsacFintEntityid");

                    b.HasIndex("UsacUserEntityid");

                    b.HasIndex(new[] { "UsacAccountno" }, "UQ__user_acc__87A4C64BACB826BC")
                        .IsUnique()
                        .HasFilter("[usac_accountno] IS NOT NULL");

                    b.ToTable("user_accounts", "payment");
                });

            modelBuilder.Entity("Domain.Entities.SO.ClaimAssetEvidence", b =>
                {
                    b.Property<int>("CaevId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("caev_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaevId"));

                    b.Property<DateTime?>("CaevCreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("caev_created_date");

                    b.Property<string>("CaevFilename")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("caev_filename");

                    b.Property<int?>("CaevFilesize")
                        .HasColumnType("int")
                        .HasColumnName("caev_filesize");

                    b.Property<string>("CaevFiletype")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("caev_filetype");

                    b.Property<string>("CaevNote")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("caev_note");

                    b.Property<int?>("CaevPartEntityid")
                        .HasColumnType("int")
                        .HasColumnName("caev_part_entityid");

                    b.Property<string>("CaevSeroId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("caev_sero_id");

                    b.Property<decimal?>("CaevServiceFee")
                        .HasColumnType("money")
                        .HasColumnName("caev_service_fee");

                    b.Property<string>("CaevUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("caev_url");

                    b.HasKey("CaevId")
                        .HasName("pk_caev_id");

                    b.HasIndex("CaevPartEntityid");

                    b.HasIndex("CaevSeroId");

                    b.ToTable("claim_asset_evidence", "so");
                });

            modelBuilder.Entity("Domain.Entities.SO.ClaimAssetSparepart", b =>
                {
                    b.Property<int>("CaspId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("casp_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaspId"));

                    b.Property<DateTime?>("CaspCreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("casp_created_date");

                    b.Property<string>("CaspItemName")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("casp_item_name");

                    b.Property<decimal?>("CaspItemPrice")
                        .HasColumnType("money")
                        .HasColumnName("casp_item_price");

                    b.Property<int?>("CaspPartEntityid")
                        .HasColumnType("int")
                        .HasColumnName("casp_part_entityid");

                    b.Property<int?>("CaspQuantity")
                        .HasColumnType("int")
                        .HasColumnName("casp_quantity");

                    b.Property<string>("CaspSeroId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("casp_sero_id");

                    b.Property<decimal?>("CaspSubtotal")
                        .HasColumnType("money")
                        .HasColumnName("casp_subtotal");

                    b.HasKey("CaspId")
                        .HasName("pk_casp_id");

                    b.HasIndex("CaspPartEntityid");

                    b.HasIndex("CaspSeroId");

                    b.ToTable("claim_asset_sparepart", "so");
                });

            modelBuilder.Entity("Domain.Entities.SO.Service", b =>
                {
                    b.Property<int>("ServId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("serv_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServId"));

                    b.Property<DateTime?>("ServCreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("serv_created_on");

                    b.Property<int?>("ServCreqEntityid")
                        .HasColumnType("int")
                        .HasColumnName("serv_creq_entityid");

                    b.Property<int?>("ServCustEntityid")
                        .HasColumnType("int")
                        .HasColumnName("serv_cust_entityid");

                    b.Property<DateTime?>("ServEnddate")
                        .HasColumnType("datetime")
                        .HasColumnName("serv_enddate");

                    b.Property<string>("ServInsuranceNo")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("serv_insuranceNo");

                    b.Property<int?>("ServServId")
                        .HasColumnType("int")
                        .HasColumnName("serv_serv_id");

                    b.Property<DateTime?>("ServStartdate")
                        .HasColumnType("datetime")
                        .HasColumnName("serv_startdate");

                    b.Property<string>("ServStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("serv_status");

                    b.Property<string>("ServType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("serv_type");

                    b.Property<string>("ServVehicleNo")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("serv_vehicleNo");

                    b.HasKey("ServId")
                        .HasName("pk_serv_id");

                    b.HasIndex("ServCreqEntityid");

                    b.HasIndex("ServCustEntityid");

                    b.HasIndex("ServServId");

                    b.ToTable("services", "so");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServiceOrder", b =>
                {
                    b.Property<string>("SeroId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("sero_id");

                    b.Property<int?>("SeroAgentEntityid")
                        .HasColumnType("int")
                        .HasColumnName("sero_agent_entityid");

                    b.Property<string>("SeroOrdtType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("sero_ordt_type");

                    b.Property<int?>("SeroPartId")
                        .HasColumnType("int")
                        .HasColumnName("sero_part_id");

                    b.Property<string>("SeroReason")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("sero_reason");

                    b.Property<string>("SeroSeroId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("sero_sero_id");

                    b.Property<int?>("SeroServId")
                        .HasColumnType("int")
                        .HasColumnName("sero_serv_id");

                    b.Property<string>("SeroStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("sero_status");

                    b.Property<DateTime?>("ServClaimEnddate")
                        .HasColumnType("datetime")
                        .HasColumnName("serv_claim_enddate");

                    b.Property<string>("ServClaimNo")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("serv_claim_no");

                    b.Property<DateTime?>("ServClaimStartdate")
                        .HasColumnType("datetime")
                        .HasColumnName("serv_claim_startdate");

                    b.HasKey("SeroId")
                        .HasName("pk_sero_id");

                    b.HasIndex("SeroAgentEntityid");

                    b.HasIndex("SeroPartId");

                    b.HasIndex("SeroSeroId");

                    b.HasIndex("SeroServId");

                    b.ToTable("service_orders", "so");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServiceOrderTask", b =>
                {
                    b.Property<int>("SeotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("seot_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeotId"));

                    b.Property<DateTime?>("SeotActualEnddate")
                        .HasColumnType("datetime")
                        .HasColumnName("seot_actual_enddate");

                    b.Property<DateTime?>("SeotActualStartdate")
                        .HasColumnType("datetime")
                        .HasColumnName("seot_actual_startdate");

                    b.Property<string>("SeotArwgCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("seot_arwg_code");

                    b.Property<DateTime?>("SeotEnddate")
                        .HasColumnType("datetime")
                        .HasColumnName("seot_enddate");

                    b.Property<string>("SeotName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("seot_name");

                    b.Property<string>("SeotSeroId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("seot_sero_id");

                    b.Property<DateTime?>("SeotStartdate")
                        .HasColumnType("datetime")
                        .HasColumnName("seot_startdate");

                    b.Property<string>("SeotStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("seot_status");

                    b.HasKey("SeotId")
                        .HasName("pk_seot_id");

                    b.HasIndex("SeotArwgCode");

                    b.HasIndex("SeotSeroId");

                    b.ToTable("service_order_tasks", "so");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServiceOrderWorkorder", b =>
                {
                    b.Property<int>("SowoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sowo_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SowoId"));

                    b.Property<DateTime?>("SowoModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("sowo_modified_date");

                    b.Property<string>("SowoName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("sowo_name");

                    b.Property<int?>("SowoSeotId")
                        .HasColumnType("int")
                        .HasColumnName("sowo_seot_id");

                    b.Property<string>("SowoStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("sowo_status");

                    b.HasKey("SowoId")
                        .HasName("pk_sowo_id");

                    b.HasIndex("SowoSeotId");

                    b.ToTable("service_order_workorder", "so");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServicePremi", b =>
                {
                    b.Property<int>("SemiServId")
                        .HasColumnType("int")
                        .HasColumnName("semi_serv_id");

                    b.Property<DateTime?>("SemiModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("semi_modified_date");

                    b.Property<string>("SemiPaidType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("semi_paid_type");

                    b.Property<decimal?>("SemiPremiCredit")
                        .HasColumnType("money")
                        .HasColumnName("semi_premi_credit");

                    b.Property<decimal?>("SemiPremiDebet")
                        .HasColumnType("money")
                        .HasColumnName("semi_premi_debet");

                    b.Property<string>("SemiStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("semi_status");

                    b.HasKey("SemiServId")
                        .HasName("pk_semi_serv_id");

                    b.ToTable("service_premi", "so");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServicePremiCredit", b =>
                {
                    b.Property<int>("SecrId")
                        .HasColumnType("int")
                        .HasColumnName("secr_id");

                    b.Property<int>("SecrServId")
                        .HasColumnType("int")
                        .HasColumnName("secr_serv_id");

                    b.Property<DateTime?>("SecrDuedate")
                        .HasColumnType("datetime")
                        .HasColumnName("secr_duedate");

                    b.Property<string>("SecrPatrTrxno")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("secr_patr_trxno");

                    b.Property<decimal?>("SecrPremiCredit")
                        .HasColumnType("money")
                        .HasColumnName("secr_premi_credit");

                    b.Property<decimal?>("SecrPremiDebet")
                        .HasColumnType("money")
                        .HasColumnName("secr_premi_debet");

                    b.Property<DateTime?>("SecrTrxDate")
                        .HasColumnType("datetime")
                        .HasColumnName("secr_trx_date");

                    b.Property<string>("SecrYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("secr_year");

                    b.HasKey("SecrId", "SecrServId")
                        .HasName("pk_secr");

                    b.HasIndex("SecrPatrTrxno");

                    b.HasIndex("SecrServId");

                    b.ToTable("service_premi_credit", "so");
                });

            modelBuilder.Entity("Domain.Entities.Users.BusinessEntity", b =>
                {
                    b.Property<int>("Entityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("entityid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Entityid"));

                    b.Property<DateTime>("EntityModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("entity_modified_date");

                    b.HasKey("Entityid")
                        .HasName("PK__business__DECC754018A2C1FF");

                    b.ToTable("business_entity", "users");
                });

            modelBuilder.Entity("Domain.Entities.Users.RefreshToken", b =>
                {
                    b.Property<int>("RetoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reto_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetoId"));

                    b.Property<DateTime?>("RetoExpireDate")
                        .HasColumnType("date")
                        .HasColumnName("reto_expire_date");

                    b.Property<string>("RetoToken")
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)")
                        .HasColumnName("reto_token");

                    b.Property<int?>("RetoUserId")
                        .HasColumnType("int")
                        .HasColumnName("reto_user_id");

                    b.HasKey("RetoId")
                        .HasName("pk_reto_id");

                    b.HasIndex("RetoUserId");

                    b.HasIndex(new[] { "RetoToken" }, "uq_reto_token")
                        .IsUnique()
                        .HasFilter("[reto_token] IS NOT NULL");

                    b.ToTable("refresh_token", "users");
                });

            modelBuilder.Entity("Domain.Entities.Users.Role", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("role_name")
                        .IsFixedLength();

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("role_description");

                    b.HasKey("RoleName")
                        .HasName("pk_roles");

                    b.ToTable("roles", "users");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("UserEntityid")
                        .HasColumnType("int")
                        .HasColumnName("user_entityid");

                    b.Property<DateTime?>("UserBirthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("user_birth_date");

                    b.Property<string>("UserBirthPlace")
                        .HasMaxLength(55)
                        .IsUnicode(false)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("user_birth_place");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("user_email");

                    b.Property<string>("UserFullName")
                        .HasMaxLength(85)
                        .IsUnicode(false)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("user_full_name");

                    b.Property<DateTime?>("UserModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("user_modified_date");

                    b.Property<string>("UserName")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("user_name");

                    b.Property<string>("UserNationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("user_national_id");

                    b.Property<string>("UserNpwp")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("user_npwp");

                    b.Property<string>("UserPassword")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("user_password");

                    b.Property<string>("UserPhoto")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("user_photo");

                    b.HasKey("UserEntityid")
                        .HasName("PK__users__32806B0622625187");

                    b.HasIndex(new[] { "UserNpwp" }, "UQ__users__58883F8602CC93E4")
                        .IsUnique()
                        .HasFilter("[user_npwp] IS NOT NULL");

                    b.HasIndex(new[] { "UserNationalId" }, "UQ__users__60A5BA8FD8A27B24")
                        .IsUnique();

                    b.HasIndex(new[] { "UserName" }, "UQ__users__7C9273C449437A87")
                        .IsUnique()
                        .HasFilter("[user_name] IS NOT NULL");

                    b.ToTable("users", "users");
                });

            modelBuilder.Entity("Domain.Entities.Users.UserAddress", b =>
                {
                    b.Property<int>("UsdrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("usdr_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsdrId"));

                    b.Property<int>("UsdrEntityid")
                        .HasColumnType("int")
                        .HasColumnName("usdr_entityid");

                    b.Property<string>("UsdrAddress1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("usdr_address1");

                    b.Property<string>("UsdrAddress2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("usdr_address2");

                    b.Property<int?>("UsdrCityId")
                        .HasColumnType("int")
                        .HasColumnName("usdr_city_id");

                    b.Property<DateTime?>("UsdrModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("usdr_modified_date");

                    b.HasKey("UsdrId", "UsdrEntityid")
                        .HasName("pk_entity_address");

                    b.HasIndex("UsdrCityId");

                    b.HasIndex("UsdrEntityid");

                    b.ToTable("user_address", "users");
                });

            modelBuilder.Entity("Domain.Entities.Users.UserPhone", b =>
                {
                    b.Property<int>("UsphEntityid")
                        .HasColumnType("int")
                        .HasColumnName("usph_entityid");

                    b.Property<string>("UsphPhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("usph_phone_number");

                    b.Property<string>("UsphMime")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("usph_mime");

                    b.Property<DateTime?>("UsphModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("usph_modified_date");

                    b.Property<string>("UsphPhoneType")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("usph_phone_type");

                    b.Property<string>("UsphStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("usph_status");

                    b.HasKey("UsphEntityid", "UsphPhoneNumber")
                        .HasName("pk_entity_phone");

                    b.ToTable("user_phone", "users");
                });

            modelBuilder.Entity("Domain.Entities.Users.UserRole", b =>
                {
                    b.Property<int>("UsroEntityid")
                        .HasColumnType("int")
                        .HasColumnName("usro_entityid");

                    b.Property<string>("UsroRoleName")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("usro_role_name")
                        .IsFixedLength();

                    b.Property<DateTime?>("UsroModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("usro_modified_date");

                    b.Property<string>("UsroStatus")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("usro_status");

                    b.HasKey("UsroEntityid", "UsroRoleName")
                        .HasName("pk_usro");

                    b.HasIndex("UsroRoleName");

                    b.ToTable("user_roles", "users");
                });

            modelBuilder.Entity("Domain.Entities.CR.CustomerClaim", b =>
                {
                    b.HasOne("Domain.Entities.CR.CustomerRequest", "CuclCreqEntity")
                        .WithOne("CustomerClaim")
                        .HasForeignKey("Domain.Entities.CR.CustomerClaim", "CuclCreqEntityid")
                        .IsRequired()
                        .HasConstraintName("FK_CUCLCREQ");

                    b.Navigation("CuclCreqEntity");
                });

            modelBuilder.Entity("Domain.Entities.CR.CustomerInscAsset", b =>
                {
                    b.HasOne("Domain.Entities.Master.CarSeries", "CiasCars")
                        .WithMany("CustomerInscAssets")
                        .HasForeignKey("CiasCarsId")
                        .HasConstraintName("FK_CIASCARS");

                    b.HasOne("Domain.Entities.Master.City", "CiasCity")
                        .WithMany("CustomerInscAssets")
                        .HasForeignKey("CiasCityId")
                        .HasConstraintName("FK_CIASCITY");

                    b.HasOne("Domain.Entities.CR.CustomerRequest", "CiasCreqEntity")
                        .WithOne("CustomerInscAsset")
                        .HasForeignKey("Domain.Entities.CR.CustomerInscAsset", "CiasCreqEntityid")
                        .IsRequired()
                        .HasConstraintName("FK_CIASCREQ");

                    b.HasOne("Domain.Entities.Master.InsuranceType", "CiasIntyNameNavigation")
                        .WithMany("CustomerInscAssets")
                        .HasForeignKey("CiasIntyName")
                        .HasConstraintName("FK_CIASINTY");

                    b.Navigation("CiasCars");

                    b.Navigation("CiasCity");

                    b.Navigation("CiasCreqEntity");

                    b.Navigation("CiasIntyNameNavigation");
                });

            modelBuilder.Entity("Domain.Entities.CR.CustomerInscDoc", b =>
                {
                    b.HasOne("Domain.Entities.CR.CustomerInscAsset", "CadocCreqEntity")
                        .WithMany("CustomerInscDocs")
                        .HasForeignKey("CadocCreqEntityid")
                        .IsRequired()
                        .HasConstraintName("FK_CADOCCREQ");

                    b.Navigation("CadocCreqEntity");
                });

            modelBuilder.Entity("Domain.Entities.CR.CustomerInscExtend", b =>
                {
                    b.HasOne("Domain.Entities.CR.CustomerInscAsset", "CuexCreqEntity")
                        .WithMany("CustomerInscExtends")
                        .HasForeignKey("CuexCreqEntityid")
                        .IsRequired()
                        .HasConstraintName("FK_CUEXCREQ");

                    b.Navigation("CuexCreqEntity");
                });

            modelBuilder.Entity("Domain.Entities.CR.CustomerRequest", b =>
                {
                    b.HasOne("Domain.Entities.HR.EmployeeAreWorkgroup", "CreqAgenEntity")
                        .WithMany("CustomerRequests")
                        .HasForeignKey("CreqAgenEntityid")
                        .HasPrincipalKey("EawgId")
                        .HasConstraintName("FK_CREQAGEN");

                    b.HasOne("Domain.Entities.Users.User", "CreqCustEntity")
                        .WithMany("CustomerRequests")
                        .HasForeignKey("CreqCustEntityid")
                        .HasConstraintName("FK_CREQENTITY");

                    b.HasOne("Domain.Entities.Users.BusinessEntity", "CreqEntity")
                        .WithOne("CustomerRequest")
                        .HasForeignKey("Domain.Entities.CR.CustomerRequest", "CreqEntityid")
                        .IsRequired()
                        .HasConstraintName("FK_CREQCUST_ENTITY");

                    b.Navigation("CreqAgenEntity");

                    b.Navigation("CreqCustEntity");

                    b.Navigation("CreqEntity");
                });

            modelBuilder.Entity("Domain.Entities.HR.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "EmpEntity")
                        .WithOne("Employee")
                        .HasForeignKey("Domain.Entities.HR.Employee", "EmpEntityid")
                        .IsRequired()
                        .HasConstraintName("FK__employees__emp_e__32AB8735");

                    b.HasOne("Domain.Entities.HR.JobType", "EmpJobCodeNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("EmpJobCode")
                        .HasConstraintName("FK__employees__emp_j__339FAB6E");

                    b.Navigation("EmpEntity");

                    b.Navigation("EmpJobCodeNavigation");
                });

            modelBuilder.Entity("Domain.Entities.HR.EmployeeAreWorkgroup", b =>
                {
                    b.HasOne("Domain.Entities.Master.AreaWorkgroup", "EawgArwgCodeNavigation")
                        .WithMany("EmployeeAreWorkgroups")
                        .HasForeignKey("EawgArwgCode")
                        .HasConstraintName("FK__employee___eawg___30C33EC3");

                    b.HasOne("Domain.Entities.HR.Employee", "EawgEntity")
                        .WithMany("EmployeeAreWorkgroups")
                        .HasForeignKey("EawgEntityid")
                        .IsRequired()
                        .HasConstraintName("FK__employee___eawg___2FCF1A8A");

                    b.Navigation("EawgArwgCodeNavigation");

                    b.Navigation("EawgEntity");
                });

            modelBuilder.Entity("Domain.Entities.HR.EmployeeSalaryDetail", b =>
                {
                    b.HasOne("Domain.Entities.HR.Employee", "EmsaEmpEntity")
                        .WithMany("EmployeeSalaryDetails")
                        .HasForeignKey("EmsaEmpEntityid")
                        .IsRequired()
                        .HasConstraintName("FK__employee___emsa___31B762FC");

                    b.Navigation("EmsaEmpEntity");
                });

            modelBuilder.Entity("Domain.Entities.Master.AreaWorkgroup", b =>
                {
                    b.HasOne("Domain.Entities.Master.City", "ArwgCity")
                        .WithMany("AreaWorkgroups")
                        .HasForeignKey("ArwgCityId")
                        .HasConstraintName("FK__area_work__arwg___3493CFA7");

                    b.Navigation("ArwgCity");
                });

            modelBuilder.Entity("Domain.Entities.Master.CarModel", b =>
                {
                    b.HasOne("Domain.Entities.Master.CarBrand", "CarmCabr")
                        .WithMany("CarModels")
                        .HasForeignKey("CarmCabrId")
                        .HasConstraintName("FK__car_model__carm___3587F3E0");

                    b.Navigation("CarmCabr");
                });

            modelBuilder.Entity("Domain.Entities.Master.CarSeries", b =>
                {
                    b.HasOne("Domain.Entities.Master.CarModel", "CarsCarm")
                        .WithMany("CarSeries")
                        .HasForeignKey("CarsCarmId")
                        .HasConstraintName("FK__car_serie__cars___367C1819");

                    b.Navigation("CarsCarm");
                });

            modelBuilder.Entity("Domain.Entities.Master.City", b =>
                {
                    b.HasOne("Domain.Entities.Master.Provinsi", "CityProv")
                        .WithMany("Cities")
                        .HasForeignKey("CityProvId")
                        .HasConstraintName("FK__cities__city_pro__37703C52");

                    b.Navigation("CityProv");
                });

            modelBuilder.Entity("Domain.Entities.Master.Provinsi", b =>
                {
                    b.HasOne("Domain.Entities.Master.Zone", "ProvZones")
                        .WithMany("Provinsis")
                        .HasForeignKey("ProvZonesId")
                        .HasConstraintName("FK__provinsi__prov_z__3864608B");

                    b.Navigation("ProvZones");
                });

            modelBuilder.Entity("Domain.Entities.Master.RegionPlat", b =>
                {
                    b.HasOne("Domain.Entities.Master.Provinsi", "RegpProv")
                        .WithMany("RegionPlats")
                        .HasForeignKey("RegpProvId")
                        .HasConstraintName("FK__region_pl__regp___395884C4");

                    b.Navigation("RegpProv");
                });

            modelBuilder.Entity("Domain.Entities.Master.TemplateInsurancePremi", b =>
                {
                    b.HasOne("Domain.Entities.Master.Category", "TemiCate")
                        .WithMany("TemplateInsurancePremis")
                        .HasForeignKey("TemiCateId")
                        .HasConstraintName("FK__template___temi___3C34F16F");

                    b.HasOne("Domain.Entities.Master.InsuranceType", "TemiIntyNameNavigation")
                        .WithMany("TemplateInsurancePremis")
                        .HasForeignKey("TemiIntyName")
                        .HasConstraintName("FK__template___temi___3B40CD36");

                    b.HasOne("Domain.Entities.Master.Zone", "TemiZones")
                        .WithMany("TemplateInsurancePremis")
                        .HasForeignKey("TemiZonesId")
                        .HasConstraintName("FK__template___temi___3A4CA8FD");

                    b.Navigation("TemiCate");

                    b.Navigation("TemiIntyNameNavigation");

                    b.Navigation("TemiZones");
                });

            modelBuilder.Entity("Domain.Entities.Master.TemplateServiceTask", b =>
                {
                    b.HasOne("Domain.Entities.Master.TemplateType", "TestaTety")
                        .WithMany("TemplateServiceTasks")
                        .HasForeignKey("TestaTetyId")
                        .HasConstraintName("FK__template___testa__3D2915A8");

                    b.Navigation("TestaTety");
                });

            modelBuilder.Entity("Domain.Entities.Master.TemplateTaskWorkorder", b =>
                {
                    b.HasOne("Domain.Entities.Master.TemplateServiceTask", "TewoTesta")
                        .WithMany("TemplateTaskWorkorders")
                        .HasForeignKey("TewoTestaId")
                        .HasConstraintName("FK__template___tewo___3E1D39E1");

                    b.Navigation("TewoTesta");
                });

            modelBuilder.Entity("Domain.Entities.Partners.BatchPartnerInvoice", b =>
                {
                    b.HasOne("Domain.Entities.Payment.PaymentTransaction", "BpinPatrTrxnoNavigation")
                        .WithMany("BatchPartnerInvoices")
                        .HasForeignKey("BpinPatrTrxno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_bpin_patr_trxno");

                    b.HasOne("Domain.Entities.Partners.Partner", "BpinPatrnEntity")
                        .WithMany("BatchPartnerInvoices")
                        .HasForeignKey("BpinPatrnEntityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_bpin_patrn_entityid");

                    b.HasOne("Domain.Entities.SO.ServiceOrder", "BpinSero")
                        .WithMany("BatchPartnerInvoices")
                        .HasForeignKey("BpinSeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bpin_sero_id");

                    b.Navigation("BpinPatrTrxnoNavigation");

                    b.Navigation("BpinPatrnEntity");

                    b.Navigation("BpinSero");
                });

            modelBuilder.Entity("Domain.Entities.Partners.Partner", b =>
                {
                    b.HasOne("Domain.Entities.Master.City", "PartCity")
                        .WithMany("Partners")
                        .HasForeignKey("PartCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_part_city_id");

                    b.HasOne("Domain.Entities.Users.BusinessEntity", "PartEntity")
                        .WithOne("Partner")
                        .HasForeignKey("Domain.Entities.Partners.Partner", "PartEntityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_part_entityid");

                    b.Navigation("PartCity");

                    b.Navigation("PartEntity");
                });

            modelBuilder.Entity("Domain.Entities.Partners.PartnerAreaWorkgroup", b =>
                {
                    b.HasOne("Domain.Entities.Master.AreaWorkgroup", "PawoArwgCodeNavigation")
                        .WithMany("PartnerAreaWorkgroups")
                        .HasForeignKey("PawoArwgCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pawo_arwg_code");

                    b.HasOne("Domain.Entities.Partners.PartnerContact", "Pawo")
                        .WithMany("PartnerAreaWorkgroups")
                        .HasForeignKey("PawoPatrEntityid", "PawoUserEntityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pawo_patr_user");

                    b.Navigation("Pawo");

                    b.Navigation("PawoArwgCodeNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Partners.PartnerContact", b =>
                {
                    b.HasOne("Domain.Entities.Partners.Partner", "PacoPatrnEntity")
                        .WithMany("PartnerContacts")
                        .HasForeignKey("PacoPatrnEntityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_paco_patrn_entityid");

                    b.HasOne("Domain.Entities.Users.User", "PacoUserEntity")
                        .WithMany("PartnerContacts")
                        .HasForeignKey("PacoUserEntityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_paco_user_entityid");

                    b.Navigation("PacoPatrnEntity");

                    b.Navigation("PacoUserEntity");
                });

            modelBuilder.Entity("Domain.Entities.Payment.Bank", b =>
                {
                    b.HasOne("Domain.Entities.Users.BusinessEntity", "BankEntity")
                        .WithOne("Bank")
                        .HasForeignKey("Domain.Entities.Payment.Bank", "BankEntityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bank_entityid");

                    b.Navigation("BankEntity");
                });

            modelBuilder.Entity("Domain.Entities.Payment.Fintech", b =>
                {
                    b.HasOne("Domain.Entities.Users.BusinessEntity", "FintEntity")
                        .WithOne("Fintech")
                        .HasForeignKey("Domain.Entities.Payment.Fintech", "FintEntityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fint_entityid");

                    b.Navigation("FintEntity");
                });

            modelBuilder.Entity("Domain.Entities.Payment.PaymentTransaction", b =>
                {
                    b.HasOne("Domain.Entities.Payment.PaymentTransaction", "PatrTrxnoRevNavigation")
                        .WithMany("InversePatrTrxnoRevNavigation")
                        .HasForeignKey("PatrTrxnoRev")
                        .HasConstraintName("fk_patr_trxno_rev");

                    b.Navigation("PatrTrxnoRevNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Payment.UserAccount", b =>
                {
                    b.HasOne("Domain.Entities.Payment.Bank", "UsacBankEntity")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UsacBankEntityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_usac_bank_entityid");

                    b.HasOne("Domain.Entities.Payment.Fintech", "UsacFintEntity")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UsacFintEntityid")
                        .HasConstraintName("fk_usac_fint_entityid");

                    b.HasOne("Domain.Entities.Users.User", "UsacUserEntity")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UsacUserEntityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_entityid");

                    b.Navigation("UsacBankEntity");

                    b.Navigation("UsacFintEntity");

                    b.Navigation("UsacUserEntity");
                });

            modelBuilder.Entity("Domain.Entities.SO.ClaimAssetEvidence", b =>
                {
                    b.HasOne("Domain.Entities.Partners.Partner", "CaevPartEntity")
                        .WithMany("ClaimAssetEvidences")
                        .HasForeignKey("CaevPartEntityid")
                        .HasConstraintName("fk_caev_part_entityid");

                    b.HasOne("Domain.Entities.SO.ServiceOrder", "CaevSero")
                        .WithMany("ClaimAssetEvidences")
                        .HasForeignKey("CaevSeroId")
                        .HasConstraintName("fk_caev_sero_id");

                    b.Navigation("CaevPartEntity");

                    b.Navigation("CaevSero");
                });

            modelBuilder.Entity("Domain.Entities.SO.ClaimAssetSparepart", b =>
                {
                    b.HasOne("Domain.Entities.Partners.Partner", "CaspPartEntity")
                        .WithMany("ClaimAssetSpareparts")
                        .HasForeignKey("CaspPartEntityid")
                        .HasConstraintName("fk_casp_part_entityid");

                    b.HasOne("Domain.Entities.SO.ServiceOrder", "CaspSero")
                        .WithMany("ClaimAssetSpareparts")
                        .HasForeignKey("CaspSeroId")
                        .HasConstraintName("fk_casp_sero_id");

                    b.Navigation("CaspPartEntity");

                    b.Navigation("CaspSero");
                });

            modelBuilder.Entity("Domain.Entities.SO.Service", b =>
                {
                    b.HasOne("Domain.Entities.CR.CustomerRequest", "ServCreqEntity")
                        .WithMany("Services")
                        .HasForeignKey("ServCreqEntityid")
                        .HasConstraintName("fk_serv_creq_entityid");

                    b.HasOne("Domain.Entities.Users.User", "ServCustEntity")
                        .WithMany("Services")
                        .HasForeignKey("ServCustEntityid")
                        .HasConstraintName("fk_serv_cust_entityid");

                    b.HasOne("Domain.Entities.SO.Service", "ServServ")
                        .WithMany("InverseServServ")
                        .HasForeignKey("ServServId")
                        .HasConstraintName("fk_serv_serv_id");

                    b.Navigation("ServCreqEntity");

                    b.Navigation("ServCustEntity");

                    b.Navigation("ServServ");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServiceOrder", b =>
                {
                    b.HasOne("Domain.Entities.HR.EmployeeAreWorkgroup", "SeroAgentEntity")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("SeroAgentEntityid")
                        .HasPrincipalKey("EawgId")
                        .HasConstraintName("fk_sero_eawg_code");

                    b.HasOne("Domain.Entities.Partners.Partner", "SeroPart")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("SeroPartId")
                        .HasConstraintName("FK_SERO_PART_ID");

                    b.HasOne("Domain.Entities.SO.ServiceOrder", "SeroSero")
                        .WithMany("InverseSeroSero")
                        .HasForeignKey("SeroSeroId")
                        .HasConstraintName("fk_sero_sero_id");

                    b.HasOne("Domain.Entities.SO.Service", "SeroServ")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("SeroServId")
                        .HasConstraintName("fk_sero_serv_id");

                    b.Navigation("SeroAgentEntity");

                    b.Navigation("SeroPart");

                    b.Navigation("SeroSero");

                    b.Navigation("SeroServ");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServiceOrderTask", b =>
                {
                    b.HasOne("Domain.Entities.Master.AreaWorkgroup", "SeotArwgCodeNavigation")
                        .WithMany("ServiceOrderTasks")
                        .HasForeignKey("SeotArwgCode")
                        .HasConstraintName("fk_seot_arwg_code");

                    b.HasOne("Domain.Entities.SO.ServiceOrder", "SeotSero")
                        .WithMany("ServiceOrderTasks")
                        .HasForeignKey("SeotSeroId")
                        .HasConstraintName("fk_seot_sero_id");

                    b.Navigation("SeotArwgCodeNavigation");

                    b.Navigation("SeotSero");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServiceOrderWorkorder", b =>
                {
                    b.HasOne("Domain.Entities.SO.ServiceOrderTask", "SowoSeot")
                        .WithMany("ServiceOrderWorkorders")
                        .HasForeignKey("SowoSeotId")
                        .HasConstraintName("fk_sowo_seot_id");

                    b.Navigation("SowoSeot");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServicePremi", b =>
                {
                    b.HasOne("Domain.Entities.SO.Service", "SemiServ")
                        .WithOne("ServicePremi")
                        .HasForeignKey("Domain.Entities.SO.ServicePremi", "SemiServId")
                        .IsRequired()
                        .HasConstraintName("fk_semi_serv_id");

                    b.Navigation("SemiServ");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServicePremiCredit", b =>
                {
                    b.HasOne("Domain.Entities.Payment.PaymentTransaction", "SecrPatrTrxnoNavigation")
                        .WithMany("ServicePremiCredits")
                        .HasForeignKey("SecrPatrTrxno")
                        .HasConstraintName("fk_secr_patr_trxno");

                    b.HasOne("Domain.Entities.SO.Service", "SecrServ")
                        .WithMany("ServicePremiCredits")
                        .HasForeignKey("SecrServId")
                        .IsRequired()
                        .HasConstraintName("fk_secr_serv_id");

                    b.Navigation("SecrPatrTrxnoNavigation");

                    b.Navigation("SecrServ");
                });

            modelBuilder.Entity("Domain.Entities.Users.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "RetoUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("RetoUserId")
                        .HasConstraintName("fk_reto_user_id");

                    b.Navigation("RetoUser");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.HasOne("Domain.Entities.Users.BusinessEntity", "UserEntity")
                        .WithOne("User")
                        .HasForeignKey("Domain.Entities.Users.User", "UserEntityid")
                        .IsRequired()
                        .HasConstraintName("FK__users__user_enti__634EBE90");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("Domain.Entities.Users.UserAddress", b =>
                {
                    b.HasOne("Domain.Entities.Master.City", "UsdrCity")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UsdrCityId")
                        .HasConstraintName("fk_address_cities");

                    b.HasOne("Domain.Entities.Users.User", "UsdrEntity")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UsdrEntityid")
                        .IsRequired()
                        .HasConstraintName("fk_entity_address_users");

                    b.Navigation("UsdrCity");

                    b.Navigation("UsdrEntity");
                });

            modelBuilder.Entity("Domain.Entities.Users.UserPhone", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "UsphEntity")
                        .WithMany("UserPhones")
                        .HasForeignKey("UsphEntityid")
                        .IsRequired()
                        .HasConstraintName("fk_entityid_phone");

                    b.Navigation("UsphEntity");
                });

            modelBuilder.Entity("Domain.Entities.Users.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "UsroEntity")
                        .WithMany("UserRoles")
                        .HasForeignKey("UsroEntityid")
                        .IsRequired()
                        .HasConstraintName("fk_entity_usro_users");

                    b.HasOne("Domain.Entities.Users.Role", "UsroRoleNameNavigation")
                        .WithMany("UserRoles")
                        .HasForeignKey("UsroRoleName")
                        .IsRequired()
                        .HasConstraintName("FK__user_role__usro___6166761E");

                    b.Navigation("UsroEntity");

                    b.Navigation("UsroRoleNameNavigation");
                });

            modelBuilder.Entity("Domain.Entities.CR.CustomerInscAsset", b =>
                {
                    b.Navigation("CustomerInscDocs");

                    b.Navigation("CustomerInscExtends");
                });

            modelBuilder.Entity("Domain.Entities.CR.CustomerRequest", b =>
                {
                    b.Navigation("CustomerClaim");

                    b.Navigation("CustomerInscAsset");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Domain.Entities.HR.Employee", b =>
                {
                    b.Navigation("EmployeeAreWorkgroups");

                    b.Navigation("EmployeeSalaryDetails");
                });

            modelBuilder.Entity("Domain.Entities.HR.EmployeeAreWorkgroup", b =>
                {
                    b.Navigation("CustomerRequests");

                    b.Navigation("ServiceOrders");
                });

            modelBuilder.Entity("Domain.Entities.HR.JobType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Master.AreaWorkgroup", b =>
                {
                    b.Navigation("EmployeeAreWorkgroups");

                    b.Navigation("PartnerAreaWorkgroups");

                    b.Navigation("ServiceOrderTasks");
                });

            modelBuilder.Entity("Domain.Entities.Master.CarBrand", b =>
                {
                    b.Navigation("CarModels");
                });

            modelBuilder.Entity("Domain.Entities.Master.CarModel", b =>
                {
                    b.Navigation("CarSeries");
                });

            modelBuilder.Entity("Domain.Entities.Master.CarSeries", b =>
                {
                    b.Navigation("CustomerInscAssets");
                });

            modelBuilder.Entity("Domain.Entities.Master.Category", b =>
                {
                    b.Navigation("TemplateInsurancePremis");
                });

            modelBuilder.Entity("Domain.Entities.Master.City", b =>
                {
                    b.Navigation("AreaWorkgroups");

                    b.Navigation("CustomerInscAssets");

                    b.Navigation("Partners");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Domain.Entities.Master.InsuranceType", b =>
                {
                    b.Navigation("CustomerInscAssets");

                    b.Navigation("TemplateInsurancePremis");
                });

            modelBuilder.Entity("Domain.Entities.Master.Provinsi", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("RegionPlats");
                });

            modelBuilder.Entity("Domain.Entities.Master.TemplateServiceTask", b =>
                {
                    b.Navigation("TemplateTaskWorkorders");
                });

            modelBuilder.Entity("Domain.Entities.Master.TemplateType", b =>
                {
                    b.Navigation("TemplateServiceTasks");
                });

            modelBuilder.Entity("Domain.Entities.Master.Zone", b =>
                {
                    b.Navigation("Provinsis");

                    b.Navigation("TemplateInsurancePremis");
                });

            modelBuilder.Entity("Domain.Entities.Partners.Partner", b =>
                {
                    b.Navigation("BatchPartnerInvoices");

                    b.Navigation("ClaimAssetEvidences");

                    b.Navigation("ClaimAssetSpareparts");

                    b.Navigation("PartnerContacts");

                    b.Navigation("ServiceOrders");
                });

            modelBuilder.Entity("Domain.Entities.Partners.PartnerContact", b =>
                {
                    b.Navigation("PartnerAreaWorkgroups");
                });

            modelBuilder.Entity("Domain.Entities.Payment.Bank", b =>
                {
                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("Domain.Entities.Payment.Fintech", b =>
                {
                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("Domain.Entities.Payment.PaymentTransaction", b =>
                {
                    b.Navigation("BatchPartnerInvoices");

                    b.Navigation("InversePatrTrxnoRevNavigation");

                    b.Navigation("ServicePremiCredits");
                });

            modelBuilder.Entity("Domain.Entities.SO.Service", b =>
                {
                    b.Navigation("InverseServServ");

                    b.Navigation("ServiceOrders");

                    b.Navigation("ServicePremi");

                    b.Navigation("ServicePremiCredits");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServiceOrder", b =>
                {
                    b.Navigation("BatchPartnerInvoices");

                    b.Navigation("ClaimAssetEvidences");

                    b.Navigation("ClaimAssetSpareparts");

                    b.Navigation("InverseSeroSero");

                    b.Navigation("ServiceOrderTasks");
                });

            modelBuilder.Entity("Domain.Entities.SO.ServiceOrderTask", b =>
                {
                    b.Navigation("ServiceOrderWorkorders");
                });

            modelBuilder.Entity("Domain.Entities.Users.BusinessEntity", b =>
                {
                    b.Navigation("Bank");

                    b.Navigation("CustomerRequest");

                    b.Navigation("Fintech");

                    b.Navigation("Partner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Users.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Navigation("CustomerRequests");

                    b.Navigation("Employee");

                    b.Navigation("PartnerContacts");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Services");

                    b.Navigation("UserAccounts");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserPhones");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
